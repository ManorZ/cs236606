Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -O2 -xCORE-AVX512 -qopt-zmm-usage=high -o matvector -ipo -qopt-report=5 -diag-disable=10441

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/7=14.3%] driver.c(99,1)
  -> EXTERN: (106,37) ?1memset
  -> EXTERN: (107,37) ?1memset
  -> EXTERN: (110,5) printf(const char *__restrict__, ...)
  -> (113,5) init_matrix(int, int, double, double (*)[64]) (isz = 52) (sz = 63)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (114,5) init_vector(int, double, double *) (isz = 30) (sz = 39)
     [[ Callee not marked with inlining pragma  <1>]]
  -> INLINE: (117,5) start_timer() (isz = 4) (sz = 7)
    -> EXTERN: (34,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> INLINE: (119,9) matvec(unsigned int, unsigned int, double (*)[*], double *, double *, double *) (isz = 50) (sz = 65)
  -> (121,16) stop_timer() (isz = 13) (sz = 18)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (124,5) printf(const char *__restrict__, ...)
  -> EXTERN: (125,5) printf(const char *__restrict__, ...)
  -> INLINE: (128,5) printsum(int, double *) (isz = 18) (sz = 25)
    -> EXTERN: (90,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(118,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at multiply.c(34,5) inlined into driver.c(119,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at multiply.c(37,9) inlined into driver.c(119,9)
         remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ multiply.c(38,13) ]
         remark #15388: vectorization support: reference a[0][i][j] has aligned access   [ multiply.c(38,21) ]
         remark #15388: vectorization support: reference x[j] has aligned access   [ driver.c(119,37) ]
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 8
         remark #15309: vectorization support: normalized vectorization overhead 0.361
         remark #15355: vectorization support: b[i] is double type reduction   [ driver.c(119,34) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 1.120 
         remark #15478: estimated potential speedup: 5.870 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at driver.c(88,5) inlined into driver.c(128,5)
   remark #15388: vectorization support: reference b[i] has aligned access   [ driver.c(128,19) ]
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15355: vectorization support: sum is double type reduction   [ driver.c(86,14) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 4.920 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(106,37):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (64, 0)
driver.c(107,37):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (64, 0)
driver.c(99,1):remark #34051: REGISTER ALLOCATION : [main] driver.c:99

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   36[ rax rdx rcx rsi rdi zmm0-zmm30]
        
    Routine temporaries
        Total         :     113
            Global    :      24
            Local     :      89
        Regenerable   :      35
        Spilled       :       1
        
    Routine stack
        Variables     :   34308 bytes*
            Reads     :      28 [2.64e+01 ~ 26.4%]
            Writes    :      11 [2.64e+00 ~ 2.6%]
        Spills        :       8 bytes*
            Reads     :       1 [5.82e-07 ~ 0.0%]
            Writes    :       1 [5.82e-07 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matvec(unsigned int, unsigned int, double (*)[*], double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (matvec(unsigned int, unsigned int, double (*)[*], double *, double *, double *)) multiply.c(18,1)

===========================================================================

Begin optimization report for: start_timer()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (start_timer()) driver.c(32,1)

===========================================================================

Begin optimization report for: printsum(int, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (printsum(int, double *)) driver.c(84,40)

===========================================================================

Begin optimization report for: init_vector(int, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_vector(int, double, double *)) [5/7=71.4%] driver.c(71,1)
  -> EXTERN: (75,16) fmod(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(74,5)
   remark #15388: vectorization support: reference a[i] has aligned access   [ driver.c(75,9) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 7
   remark #15309: vectorization support: normalized vectorization overhead 0.002
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 9.570 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at driver.c(74,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ driver.c(75,9) ]
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.022
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 9.570 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(71,1):remark #34051: REGISTER ALLOCATION : [init_vector] driver.c:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rsi rdi zmm0-zmm4 zmm16-zmm19 k1]
        
    Routine temporaries
        Total         :      89
            Global    :      24
            Local     :      65
        Regenerable   :      17
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_matrix(int, int, double, double (*)[64])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_matrix(int, int, double, double (*)[64])) [6/7=85.7%] driver.c(54,1)
  -> EXTERN: (59,23) fmod(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(57,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at driver.c(58,9)
      remark #15388: vectorization support: reference a[i][j] has aligned access   [ driver.c(59,13) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 7
      remark #15309: vectorization support: normalized vectorization overhead 0.003
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.370 
      remark #15478: estimated potential speedup: 9.330 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at driver.c(58,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a[i][j] has aligned access   [ driver.c(59,13) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.032
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.370 
      remark #15478: estimated potential speedup: 9.330 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at driver.c(64,9)
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a[i][63]>, stride is 64   [ driver.c(66,17) ]
   remark #15305: vectorization support: vector length 16
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 2.310 
   remark #15478: estimated potential speedup: 1.290 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(54,1):remark #34051: REGISTER ALLOCATION : [init_matrix] driver.c:54

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rdx rsi rdi r12 zmm0-zmm4 zmm16-zmm27 k1-k7]
        
    Routine temporaries
        Total         :     111
            Global    :      30
            Local     :      81
        Regenerable   :      19
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stop_timer()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stop_timer()) [7/7=100.0%] driver.c(41,1)
  -> EXTERN: (43,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)


    Report from: Code generation optimizations [cg]

driver.c(41,1):remark #34051: REGISTER ALLOCATION : [stop_timer] driver.c:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: driver.c
        stop_timer()                                 [Line    41]
        init_matrix(int, int, double, double (*)[64])[Line    54]
        init_vector(int, double, double *)           [Line    71]
        main(int, char **)                           [Line    99]


  0 out of 4 routine(s) used training profile data for PGO feedback
  0 out of 4 routine(s) were unable to use training profile data for PGO feedback
  0 out of 4 routine(s) were unable to find training profile data for PGO feedback
  4 out of 4 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

