Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -O2 -xCORE-AVX512 -qopt-zmm-usage=high -o matvector -qopt-report=5 -restrict -diag-disable=10441

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] driver.c(99,1)
  -> EXTERN: (104,18) ?1memset
  -> EXTERN: (105,15) ?1memset
  -> EXTERN: (108,5) printf(const char *__restrict__, ...)
  -> INLINE: (111,5) init_matrix(int, int, double, double (*)[63]) (isz = 65) (sz = 76)
    -> EXTERN: (59,23) fmod(double, double)
  -> INLINE: (112,5) init_vector(int, double, double *) (isz = 37) (sz = 46)
    -> EXTERN: (75,16) fmod(double, double)
  -> INLINE: (115,5) start_timer() (isz = 4) (sz = 7)
    -> EXTERN: (34,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> EXTERN: (117,9) matvec(unsigned int, unsigned int, double (*)[*], double *, double *, double *)
  -> INLINE: (119,16) stop_timer() (isz = 13) (sz = 18)
    -> EXTERN: (43,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> EXTERN: (122,5) printf(const char *__restrict__, ...)
  -> EXTERN: (123,5) printf(const char *__restrict__, ...)
  -> INLINE: (126,5) printsum(int, double *) (isz = 21) (sz = 28)
    -> EXTERN: (90,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(57,5) inlined into driver.c(111,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at driver.c(58,9) inlined into driver.c(111,5)
      remark #15389: vectorization support: reference a[i][j] has unaligned access   [ driver.c(59,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 7
      remark #15309: vectorization support: normalized vectorization overhead 0.008
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.750 
      remark #15478: estimated potential speedup: 8.970 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at driver.c(58,9) inlined into driver.c(111,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a[i][j] has unaligned access   [ driver.c(59,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.062
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.750 
      remark #15478: estimated potential speedup: 8.970 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at driver.c(74,5) inlined into driver.c(112,5)
   remark #15388: vectorization support: reference x[i] has aligned access   [ driver.c(112,27) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 7
   remark #15309: vectorization support: normalized vectorization overhead 0.002
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 110 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 9.490 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at driver.c(74,5) inlined into driver.c(112,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference x[i] has aligned access   [ driver.c(112,27) ]
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.022
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 110 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 9.490 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at driver.c(88,5) inlined into driver.c(126,5)
   remark #15388: vectorization support: reference b[i] has aligned access   [ driver.c(126,19) ]
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15355: vectorization support: sum is double type reduction   [ driver.c(86,14) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 4.920 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at driver.c(116,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(104,18):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (64, 0)
driver.c(105,15):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (64, 0)
driver.c(99,1):remark #34051: REGISTER ALLOCATION : [main] driver.c:99

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   38[ rax rdx rcx rsi rdi r8-r9 r12 zmm0-zmm27 k1 k4]
        
    Routine temporaries
        Total         :     237
            Global    :      48
            Local     :     189
        Regenerable   :      65
        Spilled       :       2
        
    Routine stack
        Variables     :   33788 bytes*
            Reads     :      10 [9.93e-05 ~ 0.0%]
            Writes    :      26 [6.12e-04 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.98e-05 ~ 0.0%]
            Writes    :       2 [1.93e-05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: start_timer()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (start_timer()) [2/6=33.3%] driver.c(32,1)
  -> EXTERN: (34,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)


    Report from: Code generation optimizations [cg]

driver.c(32,1):remark #34051: REGISTER ALLOCATION : [start_timer] driver.c:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printsum(int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printsum(int, double *)) [3/6=50.0%] driver.c(84,40)
  -> EXTERN: (90,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(88,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference vec[i] has unaligned access   [ driver.c(88,37) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15355: vectorization support: sum is double type reduction   [ driver.c(86,14) ]
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at driver.c(88,5)
   remark #15388: vectorization support: reference vec[i] has aligned access   [ driver.c(88,37) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.750
   remark #15355: vectorization support: sum is double type reduction   [ driver.c(86,14) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at driver.c(88,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference vec[i] has unaligned access   [ driver.c(88,37) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15355: vectorization support: sum is double type reduction   [ driver.c(86,14) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.380 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(84,40):remark #34051: REGISTER ALLOCATION : [printsum] driver.c:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8 zmm0-zmm4 k1]
        
    Routine temporaries
        Total         :      56
            Global    :      29
            Local     :      27
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_vector(int, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_vector(int, double, double *)) [4/6=66.7%] driver.c(71,1)
  -> EXTERN: (75,16) fmod(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(74,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ driver.c(75,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.173
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 10.230 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at driver.c(74,5)
   remark #15389: vectorization support: reference a[i] has unaligned access   [ driver.c(75,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.148
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 10.230 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at driver.c(74,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ driver.c(75,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.173
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 10.120 
   remark #15478: estimated potential speedup: 10.230 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(71,1):remark #34051: REGISTER ALLOCATION : [init_vector] driver.c:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8 r12 r14-r15 zmm0-zmm5 zmm16-zmm22 k1 k4]
        
    Routine temporaries
        Total         :      73
            Global    :      28
            Local     :      45
        Regenerable   :      10
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.88e-01 ~ 0.3%]
            Writes    :       1 [2.88e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_matrix(int, int, double, double (*)[63])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_matrix(int, int, double, double (*)[63])) [5/6=83.3%] driver.c(54,1)
  -> EXTERN: (59,23) fmod(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at driver.c(57,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at driver.c(58,9)
      remark #15389: vectorization support: reference a[i][j] has unaligned access   [ driver.c(59,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.070
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.750 
      remark #15478: estimated potential speedup: 8.960 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at driver.c(58,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a[i][j] has unaligned access   [ driver.c(59,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.178
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 10.750 
      remark #15478: estimated potential speedup: 8.960 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

driver.c(54,1):remark #34051: REGISTER ALLOCATION : [init_matrix] driver.c:54

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm8 zmm16-zmm22 k1 k4]
        
    Routine temporaries
        Total         :      59
            Global    :      29
            Local     :      30
        Regenerable   :       9
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :       9 [2.53e+00 ~ 2.5%]
            Writes    :       9 [2.13e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stop_timer()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stop_timer()) [6/6=100.0%] driver.c(41,1)
  -> EXTERN: (43,5) gettimeofday(struct timeval *__restrict__, void *__restrict__)


    Report from: Code generation optimizations [cg]

driver.c(41,1):remark #34051: REGISTER ALLOCATION : [stop_timer] driver.c:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
